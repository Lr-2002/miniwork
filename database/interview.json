[{"_id":"2d44d6c260ffae65002f1cd17785db41","answer":"<p style=\"text-align:start;text-indent:2em;\">在全局变量前加上关键字static，全局变量就定义成一个全局静态变量.</p><p style=\"text-align:start;text-indent:2em;\">静态存储区，在整个程序运行期间一直存在。</p><p style=\"text-align:start;text-indent:2em;\">初始化：未经初始化的全局静态变量会被自动初始化为0（自动对象的值是任意的，除非他被显式初始化）；</p><p style=\"text-align:start;text-indent:2em;\">作用域：全局静态变量在声明他的文件之外是不可见的，准确地说是从定义之处开始，到文件结尾。</p>","kind":"inte","ly":"网络","problem":"全局静态变量的特点","problem2":"<p>欢迎使用富文本编辑器</p>","select":false,"statr":1,"_createTime":1627369067008,"_updateTime":1627369067008,"collect":1},{"_id":"2d44d6c260ffae8c002f26697cc3b48f","answer":"<p style=\"text-align:start;text-indent:2em;\">在局部变量之前加上关键字static，局部变量就成为一个局部静态变量。</p><p style=\"text-align:start;text-indent:2em;\">内存中的位置：静态存储区</p><p style=\"text-align:start;text-indent:2em;\">初始化：未经初始化的全局静态变量会被自动初始化为0（自动对象的值是任意的，除非他被显式初始化）；</p><p style=\"text-align:start;text-indent:2em;\">作用域：作用域仍为局部作用域，当定义它的函数或者语句块结束的时候，作用域结束。但是当局部静态变量离开作用域后，并没有销毁，而是仍然驻留在内存当中，只不过我们不能再对它进行访问，直到该函数再次被调用，并且值不变；</p>","kind":"inte","ly":"网络","problem":"局部静态变量的特点","problem2":"<p>欢迎使用富文本编辑器</p>","select":false,"statr":3,"_createTime":1627369105946,"_updateTime":1627369105946,"collect":0},{"_id":"8937eaa960ffaeb5002c363d1cbd0027","answer":"<p style=\"text-align:start;text-indent:2em;\">在函数返回类型前加static，函数就定义为静态函数。函数的定义和声明在默认情况下都是extern的，但静态函数只是在声明他的文件当中可见，不能被其他文件所用。</p><p style=\"text-align:start;text-indent:2em;\">函数的实现使用static修饰，那么这个函数只可在本cpp内使用，不会同其他cpp中的同名函数引起冲突；</p><p style=\"text-align:start;text-indent:2em;\">warning：不要在头文件中声明static的全局函数，不要在cpp内声明非static的全局函数，如果你要在多个cpp中复用该函数，就把它的声明提到头文件里去，否则cpp内部声明需加上static修饰；</p>","kind":"inte","ly":"网络","problem":"静态函数的特点","problem2":"<p>欢迎使用富文本编辑器</p>","select":false,"statr":4,"_createTime":1627369141953,"_updateTime":1627521653918,"collect":0},{"_id":"2d44d6c260ffaf69002f6d411c397a8d","affirm":"0","answer":"<p>考察函数重载</p><p>函数名相同，但：函数参数个数不同，或者函数参数类型不同 或者个数和类型都不同。  </p>","kind":"c++","ly":"网络","problem":"在C++语言中，若类C中定义了一个方法int f(int a，int b)，那么方法( )不能与该方法同时存在于类C中。","problem2":"<p>欢迎使用富文本编辑器</p>","question":["int f(int x，int y)","int f(float a，int b)","float f(int x，float y)","int f(int x，float y)"],"select":true,"statr":1,"_createTime":1627369326621,"_updateTime":1627393669896},{"_id":"14139e1260ffb17d0030b41a55c86023","affirm":"3","answer":"<p><span style=\"color:#333333\"><span style=\"font-size:14px\"><span style=\"background-color:#ffffff\">1-首先赋值运算符“=”右值可以是任何常数、变量或者表达式（只要能生成一个值就行）。但左值必须是一个明确的、已命名的变量。 2-常用的双元运算符：+=，-=，*=，/= 解析： A：x+1=5，赋值运算符左边是表达式，不对； B：i++=1，从左到右运算是i=i+1=1，赋值运算符左边是表达式，错误； C：a++b=1，赋值运算符左边为表达式，错误。 D：x+=1，既x=x+1，正确。 注意背一下各个运算符的先后顺序。</span></span></span></p>","kind":"c++","ly":"网络","problem":"下面语句正确的是（）","problem2":"<p>欢迎使用富文本编辑器</p>","question":["x+1=5","i++=1","a++b=1","x+=1"],"select":true,"statr":3,"_createTime":1627369853653,"_updateTime":1627370883253},{"_id":"cd045e7560ffb1c5003520ca0dd3b04d","affirm":"3","answer":"<p style=\"text-align:start;\" size=\"0\" _root=\"undefined\" __ownerID=\"undefined\" __hash=\"undefined\" __altered=\"false\">C++函数 重载的作用:</p><p>1.多个函数共用一个名字，减少对用户的复杂性。<br/>2.函数重载是指在<span style=\"color:#0000ff\">同一作用域内</span>，可以有一组具有<span style=\"color:#0000ff\">相同函数名</span>，<span style=\"color:#0000ff\">不同参数列表</span>的函数，</p><p>这组函数被称为重载函数。重载函数通常用来命名一组功能相似的函数，这样做减少了</p><p>函数名的数量，避免了名字空间的污染，对于程序的可读性有很大的好处。</p><p>3.类的构造函数跟类名相同，也就是说：构造函数都同名。如果没有函数重载机制，</p>","kind":"c++","ly":"网络","problem":"采用函数重载的目的在于","problem2":"<p>欢迎使用富文本编辑器</p>","question":["实现共享","节约空间","提高速度","使用方便，提高可靠性"],"select":true,"statr":5,"_createTime":1627369925416,"_updateTime":1627370933627},{"_id":"cd045e756107ce6702124c3908adff09","affirm":"2","answer":"<p>欢迎使用富文本编辑器</p>","kind":"c++","ly":"网络","problem":"对C++中主函数的描述正确的是（        ）","problem2":"<p>欢迎使用富文本编辑器</p>","question":["名称为main，可为多个","名称不限，可为多个","名称为main，必须有且只有一个","名称不限，必须有且只有一个"],"select":true,"statr":297,"_createTime":1627901543001,"_updateTime":1627908191846}]